[{"content":"SciFi Classic Issues  Add Trigger named DummyTrigger Add vars for BulbOn, BulbOff, BulbBlink Replace FlashForMs with Light.Duration startState, duration, endState Lights need naming UserData should be replaced with UserValue No Set methods for timers Expired should be replaced with _Timer on methods PlayMusic doesn\u0026rsquo;t have channels in VP EffectMusic doesn\u0026rsquo;t exist Dropped to IsDropped  \r\r","description":"Add the script to the game","id":0,"section":"simulation","tags":["3D","beginner","blender","design","future pinball","graphics","primitive","ramp","wire"],"title":"üèóÔ∏è FP to VP SciFi Classic Part 3 - Script converting","uri":"https://blog.flippingflips.com/en/simulation/visualpinball/guides/design/fp-to-vp-scifi-3/"},{"content":"SciFi Classic For this guide we\u0026rsquo;ll show one way of cutting holes into your playfield.\nBlender Selecting objects to cut from With the table open in Blender:\n Z to view wire frame to make it easier to see what we need to select Num7 to get into Top Ortho Select all the ornholes you need. Ctrl-J to join the holes We\u0026rsquo;ve renamed the join to !OrnHoles for easy access in the tree  \r\rUsing modifier to cut  Z to come out of wireframe and select the playfield mesh on its own. In the modifiers tab, add a new Boolean modifier. Select Difference Select the !OrnHoles We can apply the modifier when happy  \r\rExport layers We want to also include our Ornament Holes as well as the Playfield mesh, but not joined as this isn\u0026rsquo;t supported.\n Select the joined !OrnHoles and export this for a layer in Visual Pinball. Export the Playfield Mesh  Import to Visual Pinball Playfield mesh  Create a new primitive, this must be named playfield_mesh. Make sure to use a material like PlayfieldWithImage.   Note the material should be set on the Table \u0026gt; Playfield options and not on this primitive.\n Ornaments Insert layer as before with previous, nothing special.\n We created 3D like insert by cutting holes from the lamps in Blender and offsetting the light lower than the playfield in Visual Pinball.\n \r\r","description":"Creating Visual Pinball playfield mesh with holes","id":1,"section":"simulation","tags":["3D","beginner","blender","design","future pinball","graphics","primitive","ramp","wire"],"title":"üèóÔ∏è FP to VP SciFi Classic Part 2 - Playfield mesh and holes","uri":"https://blog.flippingflips.com/en/simulation/visualpinball/guides/design/fp-to-vp-scifi-2/"},{"content":"SciFi Classic For this guide we\u0026rsquo;re going to convert the game that was shipped with Future Pinball on their website.\nSci-Fi Classic \n\r\rCredits\r----------\rTable Design and Graphics by: Matt Ellis\rCoding by: Christopher Leathley\rMusic by: Scott Haag\rThis game, as many others are unplayable for us in Future Pinball. The physics are that bad and if you want a simulation you will be frustated if you\u0026rsquo;re used to playing any real world machine. We don\u0026rsquo;t use the physics hacks some have created, as we find that these are no better.\nHaving been into the Future Pinball editor again recently writing these, the editor is pretty smart in comparison to Visual Pinball and some amazing work was done to this. In fact, we\u0026rsquo;ll start using this A LOT more, especially for guides and wires.\nImport to Blender Import the SciFi .fpt table into blender and save for quick reopening again if need to come back.\n\r\rExporting linked layers The quickest way to convert this is to export similar layers as one. eg. Selected all plastics exported as plastics.obj\nAll of these layers won\u0026rsquo;t be collidable in VP. Fake walls assigned to physics mats and any ball interaction like targets and bumpers all done in VP.\nWanted object layers We\u0026rsquo;ve quickly gone over the table and decided on what we would need as layers from this game.\n Apron Plastics Rubbers (ignore sling rubbers) Rubber Posts Metal Bolts Metal Brackets (Kickers) Metal Pegs Screws Screw Caps Star Posts Wooden guides Wire guides Wire Wall guides  Exporting object layers Use the scaled VP export preset created in earlier guides.\n Note: Wires \\ Rubbers need to be converted to mesh with an added UV before VP.\n Selecting / Exporting Tips  We found best to take each layer from top down and delete the whole blender selections as you go. eg. starting from selecting all the screws to screw caps When you delete for example and you notice you missed a piece of plastic then we can undo the delete, add to the selection and repeat. If you\u0026rsquo;re using your own table then naming your objects in FP. Example: Screw1, Screw2, then you would be able to filter and select these saving time. In the scene tree at the bottom of the list is different icons, these will give you selection of the object origin.  \r\rVisual Pinball Import We\u0026rsquo;ve started with our blank stripped template again and resized the playfield dimensions to a rough 954.5 x 1910.\n Create a Primitive and name it SciPlastics Set all Scales to 1. Position X, Y to 0 Import the SciPlastics.obj Set material to PlasticWithImage or similar otherwise kickers will be viewed in front.  We can repeat this process now copying the primitive and only having to change the name, importing a new mesh, setting material and image.\nMake Table Flippable We add in fake everything and set physics materials depending on the type.\n\r\rWe added:\n Imported Apron, Playfield, Plastic images after converting to .png GI with no cutouts and mapped to GI collection Gates (used same rotation as Future Pinball) Targets (drop and stand ups) Kicker (not enabled for now, it will get stuck without script to kick it)  \r\rTesting \r\rWe can knock the ball around fine in this table, texures are missing etc but with not much time at all we have this flipping.\nDownload SciFi VP Example Download\n","description":"How to convert tables from Future Pinball to Visual Pinball quick time.","id":2,"section":"simulation","tags":["3D","beginner","blender","design","future pinball","graphics","primitive","ramp","wire"],"title":"üèóÔ∏è FP to VP SciFi Classic Part 1 - Converting FP layers to VP","uri":"https://blog.flippingflips.com/en/simulation/visualpinball/guides/design/fp-to-vp-scifi-1/"},{"content":"A simple roll-a-ball derby game in Visual Pinball with multiple players and CPU players.\n\r\rFeature  Real horse names based on a race in 1986. Race commentary used from the race  Instructions  More Table info / todos can be found inside VP from the VP pause menu.\n Rules At least one human player needed to start the game and it\u0026rsquo;s first to the finish!\nCPU opponents will use the remaining bays.\nHole Scores  Yellow = 1 Blue = 2 Red =3  Controls    Control VP Key     AddPlayer CreditKey (5)   StartGame StartGameKey (1)   P1 Throw LeftFlipper (L Shift)   P2 Throw RightFlipper (RShift)   P3 Throw LeftMagnaSave (Ctrl)   P4 Throw RightMagnaSave (RMagnaSave)    Note This is a Work in progress and plan to update soon. You can see the rough TODO in the table info.\n Cabinet view unsupported Cabinet extras unsupported Do not mirror  Download 0.9 - fflipsVpxDerby_0.9.vpx.7z\n","description":"A `FlipperLess` Visual Pinball Table based on classic Arcade Roll A Ball Derbies.","id":3,"section":"simulation","tags":["tablez"],"title":"üèì Table - Flips VPX Derby","uri":"https://blog.flippingflips.com/en/simulation/visualpinball/tables/vpx-derby/vpx-derby/"},{"content":"Blender can import svg, so we could use this for lots of things like 3D text, making plastics layer from blueprints.\nWe wanted some 3D text in a game that would stick out like the Hollywood sign. Seeing as this process has an extra step from objects with paths it was worth documenting.\nInkscape Text We\u0026rsquo;ve opened Inkscape and created some text for our game.\n The text can be any font size as you\u0026rsquo;ll be able to resize the mesh in Blender\n \r\rFor text we need to use Path \u0026gt; Object to Path or Shift+Ctrl+C.\n\r\rSave as SVG somewhere we can load into Blender\nBlender SVG We\u0026rsquo;ve created a new blender scene and deleted the default cube as what seems to be standard issue.\nActivate Top Orthographic Num5 Num7 and File \u0026gt; Import \u0026gt; Scalable Vector Graphics and select our text svg.\n\r\rOur imported text is all on separate paths. We don\u0026rsquo;t want to adjust individual letters so we can join them by selecting all the letter and Ctrl+J to join.\nAfter this we want to center the origin. Right click \u0026gt; Set origin \u0026gt; Geometry To Origin\n\r\rCreate mesh and edit You can scale it now at this point but we can\u0026rsquo;t change the thickness.\nWe need to convert this to a mesh first, this is done in Blender 2.8 in object mode from the menu Object \u0026gt; Convert \u0026gt; Mesh From Curve.\n Prior versions Alt+C to get the menu and convert.\n Extruding  Use Num1 to go into Front view. Tab to edit mode and select all A Use E to extrude and move the mesh up  \r\r\rUVs Before this is usable in VP we\u0026rsquo;ll need to create a UV map.\n Tab to edit mode, select all A UV \u0026gt; Smart UV Project  You can see in the image below the letters have been unwrapped.\nThese letters can be flipped if needed in the UV Selection Mode Island by right click clicking and using the mirror options.\n\r\rExport to Visual Pinball Before exporting we used Num3 to access the Right View then R and x 90 to rotate it so it\u0026rsquo;s facing the front.\nUsing the VP blender export options from the first guide we save our model, then import the mesh from a Primitive in Visual Pinball`.\n\r\r Quick test with a RubberWhite material.\n ","description":"Make meshes from SVG and import to Visual Pinball","id":4,"section":"simulation","tags":["3D","beginner","blender","design","graphics","inkscape","primitive","svg"],"title":"üèóÔ∏è 3D Part 5 - Blender SVG - 3D Text","uri":"https://blog.flippingflips.com/en/simulation/visualpinball/guides/design/3d-from-svg/"},{"content":"Create ramps in Future Pinball We\u0026rsquo;ve created two ramps in FP. One ramp is just a connection Vertical Up Kicker\n\r\rWire ramp table Future Pinball table Download\nBlender Edit Wire Ramp  Import the FP table into Blender 2.7  \r\r Select every part of the ramp with Shift + Right Click. Selecting all rings, guides.  \r\r Alt + C and convert to mesh. Ctrl + J to join the wire ramp as one Tab to edit mode and A to select all Mesh \u0026gt; UV Unwrap to create a UV map for VP  Export to VP Select the VP export presets we saved and change the scale to 1.85.\nSave as new export preset vp-export-scaled-selection.\nUse in VP  Create a primitive Prim scales set to 1. x,y,z to 0 Import mesh  \r\r\r\rCollision Make the primitive a toy only so it cannot be collided with. We would replace the collide layers with an invisible VP Ramp\n","description":"How to import Future Pinball wire ramps to Blender, convert to mesh and into Visual Pinball","id":5,"section":"simulation","tags":["3D","beginner","blender","design","future pinball","graphics","primitive","ramp","wire"],"title":"üèóÔ∏è 3D Part 4b - Future Pinball wire ramps to VP","uri":"https://blog.flippingflips.com/en/simulation/visualpinball/guides/design/3d-fp-wireramps/"},{"content":"Why match dimensions? The reason we want to match the dimensions etc here is because we would like anything positioned in FP to match our VP table.\nMost objects should be a straight import to Blender and export to VP in correct position and size.\nVP Blueprint We start with our template again but the dimensions are the same as the default table.\n   Width Height     952 2162   20.250‚Äù 46.0‚Äù   514.35mm 1168.4mm    With our Visual Pinball template open, hide all the layers with # button then select 1,2,10 as visible.\nThis is enough to create our blue print from\n\r\rCreate a Blueprint that isn\u0026rsquo;t Solid and save as bmp\n You could save .png. then convert to .jpg as the bitmaps are large.\n New Future Pinball Table Create a new table in Future Pinball and set the dimensions to 514x1168 to match the VP dimensions.\n Future pinball rounds the values, so we choose nearest eg: 514\n  If the dimensions aren\u0026rsquo;t editable in the Future Pinball editor make sure to run as Administrator.\n Use the menu Table \u0026gt; Texture Manager \u0026gt; Import to load our Blueprint then we can select it as a playfield and check Display Pf in Editor.\n\r\rMove FP objects roughly into position and we have same as Visual Pinball.\n\r\r You may not see the playfield like we did when table is running until you Preferences \u0026gt; Editor Options \u0026gt; Uncheck Load Image in Editor then restart Future Pinball.\n \r\rDownload FuturePinball Template\nBlender Create mesh from VP We have exported the Visual Pinball table as obj with just Layer 10 visible as this is enough for the boundries to match.\n\r\rImport Future Pinball Table Using Blender 2.7 import the Future Pinball table using the add-on from the File \u0026gt; Import menu.\nPush Num7 to activate top down view in Ortho Num5. Select all objects with a.\nWe can scale it up to match Visual pinball by pushing S to scale then 1.85 and Enter to confirm.\n\r\rStill in Top view we can push G to move it. We move into place matching the 0,0 with the corner of the playfield.\n\r\rImport the VP obj as layer We can do this just to quickly check it fits. We import the object from the Layer 10 we did previously on this page and making sure to select the preset we saved to import Visual Pinball objects.\n\r\rWe should be good to go now and when imported to Visual Pinball there should be minor tweaking in Visual Pinball if any for 3D positioning.\nExporting the apron rails We\u0026rsquo;ve undone the step of importing the VP object and just have our FP layers. We\u0026rsquo;ll have a pop at doing the rails above the apron.\nWe\u0026rsquo;ll join them so we can export as one mesh, material with a UV map.\nRails - Join, Convert to mesh add UV  Visual pinball will not take the .obj without a UV mapped.\n Select the rails on top of the apron then do the following to join and create a UV Map:\n Ctrl+J to join the objects. Alt+C \u0026gt; Convert to mesh Tab to edit mode, A select all Mesh \u0026gt; UV Unwrap \u0026gt; Unwrap  \r\rImport to Visual Pinball We\u0026rsquo;ve created a new primitive and placed on the table at random and named apron_rails_prim.\nImport the mesh with default options.\n Set the XSize, YSize, ZSize from 100 to 1. Set the X,Y position to 0  When run the game the rails should be \u0026ldquo;roughly\u0026rdquo; there.\n\r\r Static objects (like the rails) are good this way but when you\u0026rsquo;re wanting to rotate primitives you would want a better center point / origin from blender\n ","description":"How to import Future Pinball tables to Blender, match dimensions and export some rails for a test","id":6,"section":"simulation","tags":["3D","beginner","blender","design","future pinball","graphics","primitive"],"title":"üèóÔ∏è 3D Part 4a - Future Pinball to Blender - Create to match Visual Pinball Dimensions","uri":"https://blog.flippingflips.com/en/simulation/visualpinball/guides/design/3d-fp-match-vp/"},{"content":"Blender setup A script for Blender to import Future Pinball was made for the community of GoPinball and all others. It based on an implementation of LvR from PinSimDB.\nIt will allow us to convert and import Future pinball into Blender.\nIssues Unfortunatley this plugin doesn\u0026rsquo;t work on Blender 2.8. We did try to update it but needed more than we wanted to get into.\nBlender 2.79b We have 2.8 installed, so we have picked the blender-2.79b-windows64.zip from the list.\n You won\u0026rsquo;t be able to run multiple versions installed but a portable version works if this would be a second install.\n Blender 2.79 Downloads.\nFP- AddOn Everything about the Add-On is here. FuturePinball_FPX\nWhen we last checked the download wasn\u0026rsquo;t working. It could\u0026rsquo;ve been removed because it\u0026rsquo;s incompatible with 2.8, so use the following mirror provided.\nDownload Mirror\nInstalling Add-On Run Blender 2.7 and select the menus File \u0026gt; UserPreferences \u0026gt; Add-Ons \u0026gt; Install Add-On from File.\n\r\rYou can check to enable the plugin.\n\r\rWe also need to activate the ms3d add-on for Milkshape3D otherwise importing is greyed out in the File menu.\n\r\rSave the user preferences for next load.\nImporting Future Pinball About Future Pinball Future Pinball is a real time Pinball Development System created by Christopher Leathley in 2008. It allows you to design and play your very own pinball simulation in True real time 3D. It uses Advanced Physics to provide the best possible Simulation of a true to life pinball machine.\nDownload Download @ Future Pinball.com\nFind a FP table source Open Future Pinball and use the Table launcher F4 and load the Ramp-VUK-Demo.\nSave this table to the desktop or use path the table is loaded from.\nImport table In Blender delete the default cube and File \u0026gt; Import \u0026gt; Future Pinball Table on the .fpt\nThis took just under a minute to load but you should see the table has been imported.\n\r\r Saving to .blend after loading will save time if you need to open an unchanged table.\n This screenshot is after saving the Blender file then using Blender 2.8 to load it.\n\r\r Future Pinball tables Forward and Up positions are the same to blender when loaded.\n ","description":"How to import Future Pinball tables to Blender","id":7,"section":"simulation","tags":["3D","beginner","blender","design","future pinball","graphics","primitive"],"title":"üèóÔ∏è 3D Part 4 - Future Pinball to Blender","uri":"https://blog.flippingflips.com/en/simulation/visualpinball/guides/design/3d-fp-blend-vp/"},{"content":"This is an extra guide to texturing the cube to show we can edit the UV and resuse.\nCreate a new cube texture Using the [GIMP] create an empty texture 1024x1024.\nIt\u0026rsquo;s better to have image at multiples of 2. We can also use the empty space for textures in other meshes later on.\nAdd some minecraft blocks like so.\n\r\rIn GIMP File \u0026gt; Export As and save to cube2.png.\nMap new texture in Blender Change the Image Texture in the Shader tab in Blender to the new cube2.png.\nOur the UV Editing tab the UV mapping is now only showing a piece of the texture.\nWe are going to move the faces in place so we need to change the Sticky Selection Mode to disabled otherwise when we move faces some vertexes are attached.\n\r\rSelect the last face (which was number 6 Top). Push G and now we can move it into place.\nOur texture blocks are not the perfect size against the mapping so pushing S we can scale it.\n\r\r If you cannot see the texture mapped to the cube make sure the viewport shading is selected.\n Move the other faces to the second texture and we have a block.\n\r\rUsing in Visual Pinball Export the object from Blender the same as in the previous posts with the correct settings.\nIn Visual Pinball use F3 to open the Image manager and import the cube2.png.\nWe\u0026rsquo;ll replace our cube primitive with our new mesh with the Import Mesh button and assign the cube2.png\nBefore we run the table let\u0026rsquo;s do something half fun with the block. Resize each side to 50. Move the cube so it fits 4 x Visual Pinball grid squares.\nSet the Z to be the size of the block 50. The origin is in the center of the cube so it should be on the playfield.\n\r\rNow duplicate a few times to make some stacks.\n A good way to duplicate in this spot would be to Ctrl+C on the block.\nThen while hovering inside another Visual Pinball square use the Context menu on the keyboard and Paste At\n \r\rDim myNumber\rmyNumber = 7\rIf myNumber = 7 Then\rdocument.write(\"Lucky 7!\")\rEnd If\rmyNumber = 100343\rIf myNumber = 7 Then\rdocument.write(\"You're a winner!\")\rEnd If\r\r","description":"Create a new smaller texture and adjust UVs","id":8,"section":"simulation","tags":["3D","beginner","blender","design","graphics","primitive"],"title":"üèóÔ∏è 3D Part 3b - Texture minecraft block","uri":"https://blog.flippingflips.com/en/simulation/visualpinball/guides/design/3d-textured-cube-2/"},{"content":" TODO\n Guide Outline  Export UV map Edit UV map  Export UV map Open up Blender and select the default cube. Click the UV Editing tab and you should see an already mapped out cube.\n\r\r When we Face select the cube in Edit mode we can see each square that is mapped to the cube.\n  The bottom square is the top of the cube and the top square is the bottom.\n Select all the faces in the UV with A. Push R then -90 and Enter to confirm to rotate the mapping.\nClick the UV \u0026gt; Export UV Layout menu. Change the options in the Export UV options pane if you want. We\u0026rsquo;ll change ours to 256x256\nWe\u0026rsquo;re going to use Svg here but you could use any image format from Blender at this stage. Save the file as Cube.svg.\nBasic Edit UV Map We\u0026rsquo;ve opened the svg into Inkscape and filled out the squares with numbers.\n\r\r\rMap Texture to Blender material In Object mode select the cube then click the Shading tab.\nDelete the Principled BSDF and add a new one. Add \u0026gt; Shader \u0026gt; Diffuse BSDF\nAdd an Image Texture. Add \u0026gt; Texture \u0026gt; Image Texture.\nConnect the Image Texture nodes Color to the BaseColour of the Shader then connect the BSDF to the surface of the Material\n\r\r From the Image Texture drop down select the cube.png and we\u0026rsquo;ll see it textured in view.  \r\rImport to Visual Pinball Using the export preset we created in previous guide we export wavefront .obj to cube.obj.\n In Visual Pinball import the numbered cube.png Create a primitive in Visual Pinball and Import Mesh on the cube.obj Assign a material and select the cube.png from the image drop down.  \r\r","description":"Map a texture to the default Blender cube and import into Visual Pinball","id":9,"section":"simulation","tags":["3D","beginner","blender","design","graphics","primitive"],"title":"üèóÔ∏è 3D Part 3 - Texture the Blender cube and import to Visual Pinball","uri":"https://blog.flippingflips.com/en/simulation/visualpinball/guides/design/3d-textured-cube/"},{"content":" Visual pinball 10+ is able to import wavefront .obj models.\n Following on from the previous guide have an imported table in Blender ready.\nGuide Outline  Create blender object Visual Pinball Primitive  Create blender object  Add a Cone mesh. Give it a radius of 2m and set the Z to 1m to fit on the playfield.  \r\r\r With cone selected export the obj as it is Change the options and save as preset vp-export-selection-only     Name Value     SelectionOnly Checked   Forward -Y Forward   Up -Z Up     Save the .obj file to open with Visual Pinball  Visual Pinball Primitive  Create a primitive in Visual Pinball, and set the X, Y position to 0 With the primitive selected we can name this to Cone.   Easy to lose track if not naming from Primitive\n  Click Import Mesh button and load the object with default values. Nothing changed after loading so set the editor value to 1 so it\u0026rsquo;s visible  \r\r Set the position of the object center of the table by halving the dimensions of the table. X = 476, Y = 1081 Take note of the X,Y,Z Size is 100. 100 times the size of our original model.  \r\rWe have a bit of a monstrosity but we can see it translates great in the table and all we need to do is duplicate it.\n\r\r Bride of Pinbot 3D (2020)\n ","description":"How to use Blender for Visual Pinball","id":10,"section":"simulation","tags":["3D","beginner","blender","design","graphics","primitive"],"title":"üèóÔ∏è 3D Part 2 - Import models created in Blender","uri":"https://blog.flippingflips.com/en/simulation/visualpinball/guides/design/3d-import-obj-primitives/"},{"content":" We\u0026rsquo;ll use the blank template as a starter table Link\n Adding Visual Pinball plastics Hide all layers except Layer 5, copy the Left Slingshot plastic and Paste as somewhere in the table.\nUnlock the new plastic we copied and create some random plastics by duplicating and adjusting the wall points.\n\r\rExport a solid blueprint.\n More about blueprint here. Blueprints - Whitewood\n Remove playfield background Open the image with GIMP. In the layers right click the blueprint and Add Alpha Channel\nUse the Fuzzy select tool and select the white background and Delete. Ctrl+Shift+A to select None\n\r\rAdd textures to plastics Use the Fuzzy select tool and select any of the black plastic pieces. We\u0026rsquo;ll select all the pieces.\nSelect a pattern.\n\r\rUse Ctrl+; to fill or use the Edit \u0026gt; Fill Pattern\n\r\rUse in Visual Pinball Use Export As from the File menu and import into Visual Pinball with F3 (Image Manager)\nSelect all the plastics in the layer and change the Top Image to our plastics.png.\nSet the material of the walls to Plastic and we\u0026rsquo;ve also set Collidable and using a physics material a_physics_Plastic\n\r\rRun the game and check the result.\n\r\r","description":"How to use the Visual Pinball blueprints to create a plastics layer","id":11,"section":"simulation","tags":["beginner","blueprint","cosmetic","design","graphics","plastic","wall"],"title":"üß¨ Plastics - Creating plastic layer from blueprints","uri":"https://blog.flippingflips.com/en/simulation/visualpinball/guides/design/blueprints-plastics/"},{"content":" This isn\u0026rsquo;t needed and may seem unnecessary to some users but we like to see a blank slate in the tables script and with such common code that is used in most tables we can move this out and use it again.\n Using blank template as a starter table Link\nNew Script Files Create text files in the Scripts folder with the .vbs extension.\n ball_and_sound.vbs manual_ball_ctrl.vbs   If on windows you may need to enable visible file extensions\n Manual Ball Control rothbauerw's Manual Ball Control\nWe\u0026rsquo;ll take this first as it\u0026rsquo;s in between the sound scripts.\nOn line 246 is starts and ends on line 289. Take this out and copy to the manual_ball_ctrl.vbs and save it.\n\r\r We could remove the EnableBallControl from the script on Line 26 and from the top of our table script and just use the ControlBallInPlay = 1 when we want to use it.\n Ball and sound Take all from Positional Sound Playback Functions down and add to the ball_and_sound.vbs file.\n\r\rUsing the scripts If we compile the table script with Script \u0026gt; Compile we should get a compilation successful.\nIf we run on the other hand it will fail because the first thing it misses is the sound functions.\nAdd the following to load our script functions so we can find the sound functions once more.\n1 2  ExecuteGlobal GetTextFile(\u0026#34;ball_and_sound.vbs\u0026#34;)\rExecuteGlobal GetTextFile(\u0026#34;manual_ball_ctrl.vbs\u0026#34;)\r   No error check here because we know üíØ% they\u0026rsquo;re there.\n Example download fflips_new-blank-stripped_scripts.7z\n","description":"There is code in the visual pinball script which is shipped in the default/blank tables. We can move this code into new script files.","id":12,"section":"simulation","tags":["beginner","scripting"],"title":"üìú Script - Refactoring the template script","uri":"https://blog.flippingflips.com/en/simulation/visualpinball/scripting/vbs-refactor/"},{"content":" Visual pinball 10+ is able to export the whole table as a wavefront .obj\n Guide Outline  Export Table Load Table in Blender3D  Export Table  Export a table from Visual Pinball. File \u0026gt; Export \u0026gt; Mesh If layers are hidden then these are not included in the exported mesh.  Import To Blender  If you don\u0026rsquo;t have Blender installed it can be downloaded from here\n  In Blender create a new scene. New \u0026gt; General Remove the default cube by selecting and deleting with the Delete key Import the table *.obj. File \u0026gt; Import \u0026gt; Wavefront Obj Before loading the model change the Import OBJ options so the table is the correct translation to work with.  \r\rForward: -Y Forward\nUp:______-Z Up\nSave these values as an Operator Preset named vp-import to use when importing VP again. Double click the table object to load in the Blender file explorer. Push Num_7 to activate the top down view when model is loaded Using the Middle mouse button + Shift to move or pan the view without holding Shift.  \r\r","description":"How to use Blender for Visual Pinball","id":13,"section":"simulation","tags":["3D","beginner","design","graphics","primitive"],"title":"üèóÔ∏è 3D Part 1- Export VP table to Blender","uri":"https://blog.flippingflips.com/en/simulation/visualpinball/guides/design/3d-export-table-to-blender/"},{"content":"cvpmSaucer Examples This table is a follow up to the Trough example. link.\nSaucers can be used for a range of Visual Pinball devices.\nClass and member Reference link\nSaucer Cup  Launch the ball with Enter (PlungerKey) to enter the saucer and exit as soon as hit.  \r\rDownload Saucer (Std)\nfflips_corevbs_saucer.7z\nVUK - Vertical Up Kicker \r\r Launch the ball with Enter (PlungerKey) to enter the saucer and launch it vertically  Download Saucer - Vertical Up kicker (VUK)\nfflips_corevbs_saucer_vuk.7z\n","description":"How to create Saucers, VUKs, Scoops with Visual Pinball using cvpmSaucer","id":14,"section":"simulation","tags":["beginner","kicker","saucer","scripting","scoop","switch","vuk"],"title":"üìú Core.vbs - cvpmSaucer","uri":"https://blog.flippingflips.com/en/simulation/visualpinball/scripting/core-vbs-cvpmsaucer/"},{"content":"cvpmImpulseP Examples This table is a follow up to the Trough example. link.\nWe use the trigger, shooterLane here to assign to a cvpmImpulseP named impulseP\nClass and member Reference link\nAuto-Plunger  Pushing the Enter (PlungerKey) will fire the ball.  \r\rDownload fflips_corevbs_autoplunger.7z\n","description":"How to create auto plungers with triggers or plungers in Visual Pinball","id":15,"section":"simulation","tags":["beginner","kicker","saucer","scripting","scoop","switch","vuk"],"title":"üìú Core.vbs - cvpmImpulseP","uri":"https://blog.flippingflips.com/en/simulation/visualpinball/scripting/core-vbs-cvpmimpulsep/"},{"content":"cvpmTrough Example Class and member Reference link\nAbout  Uses Dummy controller Removes Drain_Hit events (is replaced by the cvpmtrough) Textbox renamed to DebugBox to show active/inactive Trough switches.  \r\r Ball is exited from the trough via the kicker named BallRelease when the Drain is hit\n Download fflips_corevbs_trough.7z\n","description":"How to create a Trough with Visual Pinball using cvpmTrough","id":16,"section":"simulation","tags":["beginner","kicker","scripting","switch","trough"],"title":"üìú Core.vbs - cvpmTrough","uri":"https://blog.flippingflips.com/en/simulation/visualpinball/scripting/core-vbs-cvpmtrough/"},{"content":"The Core.vbs contains helper classes for BallStacks, Motors and much more.\nThis file is shipped with Visual Pinball and can be found in the Scripts folder.\nFull documentation is available from VPForums tutorials. vbsdoc.html or use the Scripts\\Core.vbs as this is updated.\nInitializing Core Vbs in a table Init Core.vbs Examples Controller timers Add timers to the table called PinMameTimer and PulseTimer if you want to update Solenoids, Lamps, Switches. You will find these timers in any PinMame table for reference.\nEmpty table (No Pinmame) Insert the following into a tables script.\n1 2 3 4 5 6 7 8 9  LoadCoreVBS\rSub LoadCoreVBS\rOn Error Resume Next\rExecuteGlobal GetTextFile(\u0026#34;core.vbs\u0026#34;)\rIf Err Then MsgBox \u0026#34;Can\u0026#39;t open core.vbs\u0026#34;\rOn Error Goto 0\rEnd Sub\r   If it\u0026rsquo;s a completely empty script, then you will need to add the following at the top of the tables script\n 1 2  Option Explicit\rRandomize\r  Loading the table F5 will load the core.vbs, if you have no errors then this is working.\nEmpty table (With Dummy Pinmame) We can create a VPinMAME.Controller without loading any machine configuration allowing us to use the classes in the Core.vbs.\n1 2 3 4 5 6 7 8  LoadCoreVBS\rSub LoadCoreVBS\rOn Error Resume Next\rExecuteGlobal GetTextFile(\u0026#34;core.vbs\u0026#34;)\rSet Controller = CreateObject(\u0026#34;VPinMAME.Controller\u0026#34;)\rIf Err Then MsgBox \u0026#34;Can\u0026#39;t open core.vbs\u0026#34;\rOn Error Goto 0\rEnd Sub\r  Constants Constants used (must be defined) like\n1  const UseSolenoids = 1      Name Description     ExtraKeyHelp Game specific keys in help window   SCoin Coin Sound   SFlipperOn Flipper activate sound   SFlipperOff Flipper deactivate sound   SSolenoidOn Solenoid activate sound   SSolenoidOff Solenoid deactivate sound   UseColoredDMD    UseDMD    UseLamps Update lamps   UseModSol    UseNVRAM Is enabled   UseSolenoids Update solenoids    Callbacks    Name Description     SolCallback(68) Solenoids (parsed at Runtime)   SolModCallback(68) Solenoid modulated callbacks (parsed at Runtime)   SolPrevState(68) When modulating solenoids are in use, needed to keep positive value levels from changing boolean state   LampCallback Sub to call after lamps are updated (or every update if UseLamps is false)   PDLedCallback Called after leds are updated   MotorCallback Called once every update for mechanics or custom sol handler   GICallback Called for each changed GI String   GICallback2 Called for each changed GI String   vpmCreateBall Called whenever a vpm class needs to create a ball   BSize    BMass    NVRAMCallback NVRAM would deliver everything of the NVRAM all the time as 1D array    Classes cvpmImpulseP Impulse Plunger for fireing balls from triggers or plungers\ncvpmImpulseP Members    Name Description     (Public) .InitImpulseP Initialise Impulse Plunger Object (Trigger, Plunger Power, Time to Full Plunge [0 = Auto])   (Public) .CreateEvents Create Hit/Unhit events   (Public) .Strength Change plunger strength   (Public) .Time Change plunger time (in seconds) to full plunger strength (0 = Auto Plunger)   (Public) .Pullback Pull the plunger back   (Public) .Fire Fires / Releases the Plunger (Manual or Auto depending on Timing Value given)   (Public) .AutoFire Fires / Releases the Plunger at Maximum Strength +/- Random variation (i.e. Instant Auto)   (Public) .Switch Switch Number to activate when ball is sitting on plunger trigger (if any)   (Public) .Random Sets the multiplier level of random variance to add (0 = No Variance / Default)   (Public) .InitEntrySnd Plays Sound as Plunger is Pulled Back   (Public) .InitExitSnd Plays Sound as Plunger is Fired (WithBall,WithoutBall)    cvpmImpulseP Snippet Create trigger named shooterLane or replace shooterLane in script for your trigger.\nGlobal 1  Dim impulseP\r  New 1 2 3 4 5 6 7  Set impulseP = New cvpmImpulseP\rWith impulseP\r.InitImpulseP shooterLane, 40, 0\r.Random 0.3\r.InitExitSnd \u0026#34;exit_sound\u0026#34;, \u0026#34;exit_sound\u0026#34;\r.CreateEvents \u0026#34;impulseP\u0026#34;\rEnd With\r  Testing Auto fire on PlungerKey up\n1 2 3 4 5  If keycode = PlungerKey Then\timpulseP.AutoFire\rPlaySound \u0026#34;plungerpull\u0026#34;,0,1,AudioPan(Plunger),0.25,0,0,1,AudioFade(Plunger)\rEnd If\r  cvpmImpulseP Example link\ncvpmSaucer Manages saucer ball stack using a Visual Pinball kicker. You can create many types using this including Scoops, VUKs\ncvpmSaucer Members    Name Description     (Public) .AddBall Add a ball to the saucer from a kicker.   (Public) .CreateEvents Auto-generate hit event for VP kicker(s) associated with this saucer   (Public) .HasBall True if the saucer is occupied.   (Public) .InitAltKick Set alternate direction and force (including Z force) - for saucers with two kickers   (Public) .InitExitVariance Modify kick direction and force (+/-, min force = 1)   (Public) .InitKicker Setup main kicker, switch, exit direction and force (including Z force)   (Public) .InitSounds Sounds to play when a ball enters the saucer or the kicker fires   (Public) .solOut Fire the primary exit kicker. Ejects ball if one is present.   (Public) .solOutAlt Fire the secondary exit kicker. Ejects ball with alternate forces if present.    cvpmSaucer Snippet This snippet uses a kicker named Saucer001. Create variables for bsSaucer and swSaucer to hold the switchNo.\nGlobal 1  Dim bsSaucer: Dim swSaucer: swSaucer = 25\r  Init 1 2 3  Set bsSaucer = New cvpmSaucer\rbsSaucer.CreateEvents \u0026#34;bsSaucer\u0026#34;, Saucer001 \u0026#39; Create events on the switch\rbsSaucer.InitKicker Saucer001, swSaucer, 180, 10, 0\r  Without CreateEvents If you are not using a controller no events will fire. So you can handle this for an original game or testing general.\nUpdate init method and comment the create events.\n1  \u0026#39;bsSaucer.CreateEvents \u0026#34;bsSaucer\u0026#34;, Saucer001 \u0026#39; Create events on the switch\r  Create Hit event method for Saucer001\n1 2 3 4 5  \u0026#39; Add a ball to bsSaucer manually and update when the saucer001 is hit\rSub Saucer001_Hit()\tbsSaucer.AddBall 1\rbsSaucer.SolOut(1)\rEnd Sub\r  cvpmSaucer Example link\ncvpmTrough Manages a trough ball stack using Visual Pinball kickers.\ncvpmTrough Members    Name Description     (Public) .AddBall Add a ball to the trough from a kicker. If kicker is the exit kicker, stacks ball at exit.   (Public) .AddSw Assign a switch at a specific slot   (Public) .Balls Get current balls in trough, or set initial number of balls in trough   (Public) .BallsPending Get number of balls waiting in trough entry   (Public) .CreateEvents Auto-generate hit events for VP entry kicker(s) associated with this trough   (Public) .EntrySw Set switch number for trough entry (if any)   (Public) .InitExit Setup exit kicker, force and direction   (Public) .InitSwitches Set trough switches using an array, from exit slot back toward entrance.   (Public) .InitEntrySounds Sounds to play when a ball enters the trough   (Public) .InitExitSounds Sounds to play when the exit kicker fires   (Public) .InitExitVariance Modify exit kick direction and force (+/-, min force = 1)   (Public) .IsDebug ' If you want to see what the trough is doing internally, add a TextBox to your table ' named DebugBox (recommend Courier New or FixedSys at a small font size)   (Public) .IsTrough Get or Set whether this trough is the default trough (first trough sets this by default)   (Public) .MaxBallsPerKick Set maximum number of balls to kick out (default 1)   (Public) .MaxSlotsPerKick Set maximum slots from which to get balls when kicking out (default 1)   (Public) .Reset Reset and update all trough switches   (Public) .Size Get or Set total number of balls trough can hold   (Public) .SolIn Solenoid handler for entry solenoid   (Public) .SolOut Solenoid handler for exit solenoid   (Friend) .Update Called from vpmTimer to update ball positions and switches    cvpmTrough Snippet This uses the default tables Drain and BallRelease kickers.\nGlobal 1 2 3  Dim bsTrough, swTrough1, swTrough2, swTrough3, swTrough4\rswTrough1 = 81: swTrough2 = 82: swTrough3=83: swTrough4=84\rSolCallback(4) = \u0026#34;bsTrough.SolOut\u0026#34; \u0026#39; Set the call back to 4\r  Init 1 2 3 4 5 6 7 8 9 10  Set bsTrough = New cvpmTrough\rbsTrough.CreateEvents \u0026#34;bsTrough\u0026#34;, Drain \u0026#39; set the object to the drain switch\rbsTrough.Size = 4\rbsTrough.Balls = 4\rbsTrough.InitSwitches Array(swTrough1, swTrough2, swTrough3, swTrough4)\rbsTrough.InitExit BallRelease, 90, 8\tbsTrough.InitEntrySounds \u0026#34;Drain\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;\u0026#34;\rbsTrough.InitExitSounds \u0026#34;BallRelease\u0026#34;, \u0026#34;\u0026#34;\rbsTrough.IsDebug = True\rbsTrough.Reset\t  Without CreateEvents If you are not using a controller no events will fire. So you can handle this for an original game or testing general.\nWe won\u0026rsquo;t be using a callback but the above definition can be left in script.\nUpdate init method after creation to kick a ball from the stack when table loads\n1 2  \u0026#39;bsTrough.CreateEvents \u0026#34;bsTrough\u0026#34;, Drain \u0026#39; set the object to the drain switch\rbsTrough.SolOut(1)\r  Handle when the ball drains\n1 2 3 4 5 6 7 8 9 10 11  \u0026#39; Add a ball to bsTrough manually and update.\rSub Drain_Hit()\rPlaySound \u0026#34;drain\u0026#34;,0,1,AudioPan(Drain),0.25,0,0,1,AudioFade(Drain) NewBall(1)\rEnd Sub\rSub NewBall(Enabled) \u0026#39; method to pulse the trough\r bsTrough.AddBall 1 Drain.DestroyBall\rbsTrough.SolOut(Enabled) End Sub\r  cvpmTrough Example link\nTODO: cvpmBallStack (DEPRECATED) cvpmCaptiveBall cvpmDips cvpmDropTarget cvpmMagnet cvpmMech cvpmNudge cvpmTimer cvpmTurnTable cvpmVLock ","description":"The core.vbs file in the visual pinball scripts directory contains helper classes, amongst other things to be used in conjunction with controllers or basic scripts","id":17,"section":"simulation","tags":["beginner","kicker","scripting","switch","trough","vuk"],"title":"üìúCore VBS","uri":"https://blog.flippingflips.com/en/simulation/visualpinball/scripting/core-vbs/"},{"content":"This script is crude but it will introduce you to VP Timers, VP Collections, VP Lights, variables, methods, loops, switch statements in Visual Basic Script\nTable prerequisites  1 Create or use an existing VPX table 2 Create a few Lights on the table 3 Create a new collection called LampCollection. (Select lights before creating and you can create from selection, F8 and skip step 4.) 4 Map these lights to the collection by selecting right click \u0026gt; add to collection \u0026gt; LampCollection 5 Create timer object named leds that is disabled. Set the interval for how long the cycle lasts  Script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57  Dim led_num:led_num=1 \u0026#39; Set step 1\rleds.Enabled = 1 \u0026#39; Enable the timer\r\r\u0026#39;**********************\r\u0026#39;Cycle Rainbow : 12 color steps over LampCollection\r\u0026#39;**********************\rSub leds_Timer()\rDim lamp\rif led_num=12 then led_num=1\rFor each lamp in LampCollection\rSelect Case led_num\rCase 1\rlamp.color=RGB(255,0,0) \u0026#39; RED\r lamp.colorFull=RGB(255,0,0)\rCase 2\rlamp.color=RGB(255,127,0)\rlamp.colorFull=RGB(255,127,0)\rCase 3\rlamp.color=RGB(255,255,0)\rlamp.colorFull=RGB(255,255,0)\rCase 4\rlamp.color=RGB(127,255,0)\rlamp.colorFull=RGB(127,255,0)\rCase 5\rlamp.color=RGB(0,255,0)\rlamp.colorFull=RGB(0,255,0)\rCase 6\rlamp.color=RGB(0,255,127)\rlamp.colorFull=RGB(0,255,127)\rCase 7\rlamp.color=RGB(0,255,255)\rlamp.colorFull=RGB(0,255,255)\rCase 8\rlamp.color=RGB(0,127,255)\rlamp.colorFull=RGB(0,127,255)\rCase 9\rlamp.color=RGB(0,0,255)\rlamp.colorFull=RGB(0,0,255)\rCase 10\rlamp.color=RGB(127,0,255)\rlamp.colorFull=RGB(127,0,255)\rCase 11\rlamp.color=RGB(255,0,255)\rlamp.colorFull=RGB(255,0,255)\rCase 12\rlamp.color=RGB(255,0,127)\rlamp.colorFull=RGB(255,0,127)\rCase else\rlamp.color=RGB(255,255,255)\rlamp.colorFull=RGB(255,255,255)\rEnd Select\rNext\rled_num = led_num +1 \u0026#39; increment step\rEnd Sub\r  Example download Download - fflips_rainbow-lights.7z\n","description":"Scripting snippet example with table for rainbow cycled lamps. This script is crude but it will introduce you to VP Timers, VP Collections, VP Lights, variables, methods, loops, switch statements...","id":18,"section":"simulation","tags":["beginner","scripting"],"title":"üìú Script - Cycle üí° Lights Rainbow","uri":"https://blog.flippingflips.com/en/simulation/visualpinball/scripting/lights-rainbow/"},{"content":"Guide Outline  In this guide we\u0026rsquo;ll use the table template as a base table to work from but you can use any.\n Download Template: Starter Blank Template\nVP Blueprint  Create a light on the table and assign to Layer 3. Set the light to blinking. Export the Blueprint with just the lights layer 3, solid or filled. See Blueprints on exporting blueprints from Visual Pinball  Inkscape  Open the Blueprint with Inkscape using default import resolution.  \r\r In Document Properties we have the image dimensions assigned and page fitted to blueprint.  \r\r Create two layers and assign the blueprint to the bottom. Create simple text over the light add a stroke if you please.  \r\r Hide the background layer and in Export Area select Page to export the whole page. Export As to select a path to export, then click Export to save the .png  VP Decals  Import the decals image into Visual Pinball in the Image Manager F3 Create a decal the size of the table. See Create Decal Assign the new image to the decal from the dropdown Select a material that has opacity checked in it\u0026rsquo;s properties Run the table to see the blinking ball save Push Q once to access the debug menu and select lights  \r\r Tweak to get some values you like from this Lights menu. Change materials on the decal layer to test  Download Table with decals applied\nfflips_decals_lights.7z\n","description":"How to create lamp decals with Inkscape from Visual Pinball blueprints","id":19,"section":"simulation","tags":["beginner","blueprint","cosmetic","decal","design","graphics","lamp","light","playfield"],"title":"üè¨ Decals Part 2. üí° Lamps","uri":"https://blog.flippingflips.com/en/simulation/visualpinball/guides/design/decals-trans-image-lights/"},{"content":" A decal is one way of using images. We\u0026rsquo;ll create a very rough layout by hand in Inkscape\n Shot layout Create a shot layout in Scalable Vector Graphics  Open a blueprint that was exported from Visual Pinball into Inkscape (not import) Keep the file dimensions when it asks Create bezier lines on a seperate layer for shot angles When happy hide the Blueprint layer Export the image as Page, checking the dimensions are in px and were the same dimesions as the blueprint.  Example layout bp_shot_layout.svg\nSave as to open with Inkscape or something that can open SVG\nbp_shot_layout.png\nShot layer exported .png\n\r\rDecal Create decal  Create a decal in visual pinball. Set its dimensions to 952x2162 Assign to a layer away from the bottom Layer 11 Lock the layer so it cannot be moved accidentley Set the X and Y positions to 0 Offset the decal to cover the playfield X:476 Y:1081 (half the lengths)  Assign image to decal  Assign a material to the decal otherwise it will look faded Import the image .png and select it from the decal Run the table with F5 or F6 to see the results  \r\r","description":"How to create and use decals with sketched out shots on a visual pinball blueprint using Inkscape to generate transparent .png ready for visual pinball.","id":20,"section":"simulation","tags":["beginner","blueprint","cosmetic","decal","design","inkscape"],"title":"üè¨ Decals Part 1. Transparent images from Inkscape","uri":"https://blog.flippingflips.com/en/simulation/visualpinball/guides/design/decal-trans-image/"},{"content":"Make sure we have the ball_HDR that is shipped with Visual Pinball templates to use as our ball image.\nBall decal tests All these tests will have logo mode selected because we want to see the ball spin üåÄ\nTry higher quality images for better results.\nSphere texture \r\r\rOk when spinning but not magic with the jaggy seam.\nPredator texture \r\r\rWood panel texture \r\r\rLooks like a nut but perfect seam. Goin\u0026rsquo; Nuts?\nLava texture \r\r\rGood\nTyre texture \r\r\rWe had to up the Brightness / Contrast on this texture.\nChrome texture \r\r\rGrid texture \r\r\rGrass texture \r\r\rCustom logo texture \r\r\rThese look better to me with a background, hence using the dark red.\nDownload fflips_balls.7z\n","description":"Changing the ball images and decals in Visual Pinball","id":21,"section":"simulation","tags":["ball","beginner","blueprint","cosmetic","decal","design","download"],"title":"‚öΩ Balls - Ball decals and images","uri":"https://blog.flippingflips.com/en/simulation/visualpinball/guides/design/ball-decals-images/"},{"content":"Using a blueprint from Visual Pinball gives us image dimensions to start with.\nI\u0026rsquo;ve exported the p1-beachwood.png from the File \u0026gt; New \u0026gt; Example Table so it act as a whitewood\n\r\rWe\u0026rsquo;ll use the blank template as a starter table Link\nGuide Outline 1. Create a blueprint\n2. Editing blueprint\n3. Using the whitewood\nCreate the blueprint Exports can be done via the File Menu by selecting Export \u0026gt; Blueprint and saving the image.\nExported blueprint objects can be outlined or solid.\n\r\r\rWe will need a bit better export, with less layers.\nHide all layers with the # button and select our collidable layer 10\n\r\rExport as a solid Blueprint\n\r\rEditing blueprint Import the image into an image editor of your choice. We\u0026rsquo;ll use the GIMP image editing software to do some basic edits.\nNow we can draw, add text and images etc. in the space we have on the playfield.\nOpen as Layers on the p1-beachwood image and resize the p1-beachwood layer to fill the blueprint image. Next add some text and hide the blueprint layer.\n\r\rExport the image to use in Visual Pinball with Export As in GIMP\nYou may want to save this as a GIMP .xcf to work on some more later.\nUsing the whitewood Open the VP image editor from the menu or pushing F3 and use the import button to select the exported image.\n\r\rShow the Table Options and select the new playfield from the dropdown. If the playfield image is hidden you can show from View \u0026gt; Playfield / Backdrop.\n\r\rF5 or better F6 to run the the game and view.\n\r\r","description":"How to use blueprints from Visual pinball edited with the GIMP to create a basic playfield whitewood","id":22,"section":"simulation","tags":["beginner","blueprint","cosmetic","design","graphics","playfield"],"title":"üß¨ Playfield - Whitewoods from VP blueprints","uri":"https://blog.flippingflips.com/en/simulation/visualpinball/guides/design/blueprints/"},{"content":"The API references have been created from the CommandReference.txt from VPX 6.0 build of Visual Pinball.\nThey can be used in Visual Pinballs script to interact with table objects.\nVariables starting with a (*) can\u0026rsquo;t be changed by the script (most can be read though) or don\u0026rsquo;t have an effect.\nGlobal Global Keys    Name     *LeftFlipperKey   *RightFlipperKey   *LeftTiltKey   *RightTiltKey   *CenterTiltKey   *PlungerKey   *StartGameKey   *AddCreditKey   *AddCreditKey2   *LeftMagnaSave   *RightMagnaSave   *LockbarKey    Global Methods    Name Description     GetBalls(Ball) returns all Balls on the table   GetElements(Editable) returns all Elements on the table   GetElementByName(string) returns a certain Element, based on the name   FireKnocker(int Count)    LoadValue(string,string,VARIANT) load a value for tablename,valuename,value   MaterialColor(string,OLE_COLOR) change base color of a material   Nudge(float Angle, float Force)    NudgeGetCalibration/NudgeSetCalibration(int XMax, int YMax, int XGain, int YGain, int DeadZone, int TiltSensitivty)    NudgeSensorStatus(VARIANT *XNudge, VARIANT *YNudge)    NudgeTiltStatus(VARIANT *XPlumb, VARIANT *YPlumb, VARIANT *TiltPercent)    SaveValue(string,string,VARIANT) save a value for tablename,valuename,value   QuitPlayer(int CloseType)    UpdateMaterial(string, float wrapLighting, float roughness, float glossyImageLerp, float thickness, float edge, float edgeAlpha, float opacity, OLE_COLOR base, OLE_COLOR glossy, OLE_COLOR clearcoat, VARIANT_BOOL isMetal, VARIANT_BOOL opacityActive, float elasticity, float elasticityFalloff, float friction, float scatterAngle) updates all parameters of a material (same input ranges as used in the material editor)   UserDirectory(string)    Version returns VP_VERSION_MAJOR * 1000 + VP_VERSION_MINOR * 100 + VP_VERSION_REVISION   VPBuildVersion same, deprecated   VersionMajor major VP version number   VersionMinor minor VP version number   VersionRevision VP version revision    Global Properties    Name Type Description Default     *GameTime int Gets the current internal game time in milliseconds    *GetCustomParam int - 1..9, i.e. GetCustomParam(1) to get \u0026ldquo;param1\u0026rdquo; and GetCustomParam(2) to get \u0026ldquo;param2\u0026rdquo; from the command line \u0026ldquo;VPinballX.exe -c1 param1 -c2 param2\u0026rdquo;    DMDWidth int - set width of DMD    DMDHeight int - set height of DMD    DMDPixels VARIANT - set array of (byte-)values (0..100), size needs to match the previously set width and height    DMDColoredPixels VARIANT - set array of (long-)values (0..255,0..255,0..255), size needs to match the previously set width and height    *NightDay int - 0..100 value set in the UI (by the user) that defines if its night or day, so that the script can tweak table elements based on that value    *ShowDT bool - Desktop mode enabled (true) or Rotated Fullscreen mode enabled (false)    *ShowFSS bool - Extended Backglass mode enabled (true) or not (false)    *SystemTime int Gets the current internal game time in milliseconds    *WindowWidth int - get width of rendering window/fullscreen    *WindowHeight int - get height of rendering window/fullscreen    YieldTime int time in milliseconds to sleep during each frame - can help side threads like vpinmame. 0    Global Audio    Name Description     EndMusic()    MusicVolume(float volume) 0..1   PlayMusic(string, float volume) volume 0..1   PlaySound(string, int loopcount, float volume, float pan, float randompitch, int pitch, bool useexisting, bool restart, float front_rear_fade)    StopSound(string)     PlaySound Options:\n also allows to increase/decrease the frequency of an already playing samples, and in general to apply all the settings to an already playing sample, and to choose if to restart this playing sample from the beginning or not loopcound chooses the amount of loops volume is in 0..1 pan ranges from -1.0 (left) over 0.0 (both) to 1.0 (right) randompitch ranges from 0.0 (no randomization) to 1.0 (vary between half speed to double speed) pitch can be positive or negative and directly adds onto the standard sample frequency useexisting is 0 or 1 (if no existing/playing copy of the sound is found, then a new one is created) restart is 0 or 1 (only useful if useexisting is 1) front_rear_fade is similar to pan but fades between the front and rear speakers so f.e. PlaySound \u0026ldquo;FlipperUp\u0026rdquo;,0,0.5,-1.0,1.0,1,1,0.0 would play the sound not looped (0), at half the volume (0.5), only on left speaker (-1.0), with varying pitch (1.0), it would reuse the same channel if it is already playing (1), restarts the sample (1), and plays it on the front speakers only (0.0)  Table    Name Type Description Default     *Name string table name    *FileName string file name (without path and extension)    *GlobalDifficulty float Mainly chooses/weights between SlopeMax and SlopeMin, but also affects precision of flippers/scattering (0..100)    *Image string playfield image    PlungerNormalize int Mech-Plunger component adjustment or weak spring, aging. 100   PlungerFilter bool  false   *Accelerometer bool     *AccelNormalMount bool     *AccelerometerAngle float     *JoltAmount int     *TiltAmount int     *JoltTriggerTime int     *TiltTriggerTime int     *DeadZone int     NudgeTime float      Table Callback    Name Description     OnBallBallCollision(ball1, ball2, velocity)     Table Audio    Name Type Description Default     *TableSoundVolume int Scales the global sound volume (in percent) 100   *TableMusicVolume int Scales the global music volume (in percent) 100    Table Backglass    Name Type Description Default     *BackglassMode int Which Backglass mode is active (0=Desktop,1=Fullscreen,2=FullSingleScreen) 0   *BackDropColor OLE_COLOR     BackdropImage string      Table Ball    Name Type Description Default     BallImage string     BallFrontDecal string image of the ball front decal    *BallDecalMode bool switch between using the ball decal as ball logo or ball \u0026lsquo;scratches\u0026rsquo;    *BallReflection  enable ball reflection on table. depending on the global video setting \u0026lsquo;Reflect Ball on Playfield\u0026rsquo; this is on or off. Or it is defined specific for this table.    BallPlayfieldReflectionScale float scale/dampen the contribution of the playfield to the ball reflections    *BallTrail enable ball trail/motion blur on table. depending on the global video setting \u0026lsquo;Ball Trail/Motion Blur\u0026rsquo; this is on or off. Or it is defined specific for this table.     *TrailStrength int defines the strength of the ball trail (0-100)     Table Collections    Name Type Description Default     Count int return count of items in the collection     Table Dimensions    Name Type Description Default     *Width float Playfield width. 1000   *Height float Playfield height. 2000   *GlassHeight float Height of Glass above Playfield    *TableHeight float Table height     Table Graphics    Name Type Description Default     *EnableAntialiasing bool enables AA for this table if you have set \u0026lsquo;Enable AntiAliasing\u0026rsquo; in the video options. false   *EnableFXAA bool enables FXAA for this table if you have set \u0026lsquo;Enable FXAA\u0026rsquo; in the video options. false   *RenderEMReels bool     *RenderDecals bool     *TableAdaptiveVSync int sets adaptive vsync option for this table (-1=use global setting, 0=off, 1=automatic, any other number is refresh rate in Hz)    DefaultBulbIntensityScale float scale/dampen the contribution of the bulbs lights on the ball. This is a default setting for all balls created on the the table. If you need ball specific intensity scaling you can change the intensity by using the BulbIntensityScale value on the ball    *DetailLevel int defines the ramp accuracy for this table and overrides the global setting from the video options (range 0-10).     Table Playfield    Name Type Description Default     *PlayfieldColor OLE_COLOR     PlayfieldReflectionStrength int  defines the reflection strength of the (dynamic) table elements on the playfield (0-100)    Table Physics    Name Type Description Default     *SlopeMax float Angle of Playfield within Cabinet (used for Physics only)    *SlopeMin float Angle of Playfield within Cabinet (used for Physics only)    Gravity float     Friction float for the Playfield 0.0025   Elasticity float for the Playfield 0.2   ElasticityFalloff float for the Playfield 0   Scatter float scatter angle for the Playfield 0   DefaultScatter float overrides all elements that have scatter angle set to \u0026lt; 0 0   *OverridePhysics int overrides the table physics settings with pre defined settings defined under Preferences -\u0026gt; Physics Options You can define up to 8 different physics settings for the table and the flippers. Save them to one of the 8 slots and by assigning the slot number to this OverridePhysics it overrides these settings. 0 (means use table settings)   PhysicsLoopTime int the meaning of this has changed starting with 9.2.1: it specifies the maximum number of iterations spent in the physics update. by setting it f.e. to 1, the rendered frame updates will -always- match the physics updates,everything above 1 allows for multiple physics updates per frame (2, 3 or 4 can be good values for this, as it slows down the physics temporarily if the FPS drop below 50, 33 or 25 in these cases). -1 (which means infinite updates allowed)    Table POV    Name Type Description Default     *Scalex float X Scale of Table    *Scaley float Y Scale of Table    *Scalez float Z Scale of Table    *Xlatex float X Offset of Table    *Xlatey float Y Offset of Table    *Xlatez float Z Offset of Table    *Inclination float Angle of Table (used for Display only) 43   *Rotation float Rotation of Table (used mainly for FS/Cab tables: 270)    *Layback float Skew of Table (used mainly for FS/Cab tables). 0   *FieldOfView float Perspective of Table. 45    Table Lighting    Name Type Description Default     *LightAmbient OLE_COLOR changes the ambient light contribution for each material, please always try to keep this at full Black    *Light0Emission OLE_COLOR changes the light contribution for each material (currently light0 emission is copied to light1, too)    LightEmissionScale float     EnvironmentEmissionScale float     AOScale float scaling factor when blending the ambient occlusion    SSRScale float scaling factor when blending the screen space reflections    BloomStrength float scaling factor when blurring the clipped framebuffer contribution (leave at 1 for kinda natural glow)    *LightHeight float height of lights    *LightRange float range of lights    ColorGradeImage string the 256x16 LUT texture used for the color grading post process     Table Stereo 3D    Name Type Description Default     *MaxSeparation float Maximum separation/scale effect for Stereo 3D (ranges from 0..1)    *ZPD float Reads the depth where the Stereo 3D should happen (ranges from 0..1)    *Offset float Reads the constant offset for the Stereo 3D effect (ranges from 0..1)     Objects Ball Ball Methods None\nBall Read Only Ball Read/Write    Name Type Description Default     AngMomX float     AngMomY float     AngMomZ float     AngVelX float     AngVelY float     AngVelZ float     BulbIntensityScale float allows to dampen/scale the intensity of (bulb-)light reflections on each ball (e.g. to simulate shadowing in the ball lane, etc)    Color OLE_COLOR sets color of ball    DecalMode bool switch between using the ball decal as ball logo or ball \u0026lsquo;scratches\u0026rsquo;    FrontDecal string image of the ball front decal    ForceReflection bool if enabled the ball will be reflection on the playfield even it\u0026rsquo;s on a ramp or an upper playfield. (default=0)    ID int gets a unique ID for each ball created or allows to set an artificial one to distinguish different balls on the table    Image string     Mass float     PlayfieldReflectionScale float allows to dampen/scale the contribution of the playfield reflections on each ball (see BallPlayfieldReflectionScale() for the Table)    Radius float     ReflectionEnabled bool if playfield reflects objects this can be used to enable/disable the reflection for a specific ball    UserValue any can store any user defined value for re-use later-on    VelX float     VelY float     VelZ float     Visible bool changes if the ball is visible on the playfield or not (e.g. only physics simulated)    X float     Y float     Z float      Bumper Bumper Read Only    Name Type Description Default     *Name string     *X float X position    *Y float Y position    *BaseMaterial string     *BaseVisible bool     *CapMaterial string     *CapVisible bool     *HeightScale float     *Orientation float     *Radius float     *ReflectionEnabled bool     *Scatter float     *SkirtMaterial string     *Surface string      Bumper Read/Write    Name Type Description Default     Collidable bool     EnableSkirtAnimation bool en/disables the skirt animation of a bumper, for example if something external is triggering the bumper (i.e. no ball contact with the skirt) true   Force float     HasHitEvent bool     RingDropOffset float An offset to influence the ring animation. The default move down limit is calculated by (HeightScale0.5) * Table_Scalez. The final move down limit is calculated by RingDropOffset + (HeightScale0.5)* Table_Scalez. For example: If the ring is moving too far down you have to try to set the RingDropOffset to -10.    RingSpeed float     TimerEnabled bool     TimerInterval int set interval for triggering the timer (1 equals 1000 timer calls per second, 1000 equals 1 timer call per second, -1 makes it dependent on the FPS that a user can reach)    Threshold float     UserValue any can store any user defined value for re-use later-on)     Decal Decal Read Only    Name Type Description Default     *X float     *Y float     *FontColor OLE_COLOR     *Font IFontDisp     *HasVerticalText bool     *Height float     *Image string texture name    *Rotation float     *SizingType SizingType 0=AutoSize, 1=AutoWidth, 2=ManualSize    *Surface string     *Type DecalType 0=Text, 1=Image    *Text string     *Width float      EM Reel EM Reel Methods    Name Description     AddValue(int value)    ResetToZero()    SetValue(int value)    SpinReel(int ReelNumber, int PulseCount)     EM Reel Read Only    Name Type Description Default     *Name string     *BackColor OLE_COLOR     *Image string picture name    *UserImageGrid bool      EM Reel Read/Write    Name Type Description Default     IsTransparent bool     Width float     Height float     ImagesPerGridRow int     X float     Y float     Range float     Reels float     Spacing float     Sound string     Steps float     TimerEnabled bool     TimerInterval int - set interval for triggering the timer (1 equals 1000 timer calls per second, 1000 equals 1 timer call per second, -1 makes it dependent on the FPS that a user can reach)    UpdateInterval int     UserValue any can store any user defined value for re-use later-on    Visible bool      Flasher Flasher Methods None\nFlasher Read Only    Name Type Description Default     *Name string     *DisplayTexture bool      Flasher Read/Write    Name Type Description Default     AddBlend bool use additive alpha blending instead of classical alpha blending    Amount int defines the filter amount how much of ImageB is filtered over ImageA in percent (0..100, can be set to \u0026gt;100 though)    Color  defines the color of the element in the editor. If you don\u0026rsquo;t want to colorize the image set the color to blank white (RGB 255,255,255)    DMD bool enable DMD image via script connection    Filter string use one of the following filters to blend ImageA \u0026gt; ImageB: \u0026lsquo;None\u0026rsquo;, \u0026lsquo;Additive\u0026rsquo;, \u0026lsquo;Multiply\u0026rsquo;, \u0026lsquo;Overlay\u0026rsquo;, \u0026lsquo;Screen\u0026rsquo; (filter names are case sensitive!) this feature only works if you defined both images    ImageA string texture name for image A    ImageB string texture name for image B    IntensityScale float - sets the flashers brightness/emission scale, so that one can fade in/out all affected flashers with the same scaling factor    Mode int 0=ImageModeWorld, 1=ImageModeWrap    ModulateVsAdd float blends between modulating and additive when bulb is enabled (0..1)    Opacity int lets you define the blend amount 0..100% (you can use values \u0026gt;100% though to for example enhance the strength of flashers in additive alpha blending mode)    ImageAlignment      TimerEnabled bool     TimerInterval int set interval for triggering the timer (1 equals 1000 timer calls per second, 1000 equals 1 timer call per second, -1 makes it dependent on the FPS that a user can reach)    UserValue any can store any user defined value for re-use later-on    Visible bool shows/hides the flasher     Flipper Flipper Methods    Name Description     RotateToEnd() Rotates back to end angle   RotateToStart() Rotates back to start angle    Flipper Read Only    Name Type Description Default     *BaseRadius float     *Color OLE_COLOR     *CurrentAngle float only readable    *Enabled bool     *EndAngle float     *EndRadius float     *FlipperRadiusMin float     *Height float     *Length float     *RubberColor OLE_COLOR     *RubberHeight float     *RubberThickness float     *RubberWidth float     *StartAngle float     *Surface string     *X float     *Y float     *Visible bool      Flipper Read/Write    Name Type Description Default     Elasticity float     ElasticityFalloff float     EOSTorque float This value/factor affects the way how long a flipper arm stays in the up/raised position even when you released the flipper button. On real pinballs it will take some time until the flipper solenoid loses it\u0026rsquo;s power until the flipper drops down or is forced to move by a hitting ball. The default value is 0.75. For fine tuning you can change that but not higher than 1 or lower than 0.5 or the result will be totally unrealistic.    EOSTorqueAngle float This configures the range where the EOS Torque will be applied    Friction float 0..1    Mass float     OverridePhysics(int)  overrides the flipper physics settings with pre defined settings defined under Preferences -\u0026gt; Physics Options. You can define up to 8 different physics settings for the table and the flippers. Save them to one of the 8 slots and by assigning the slot number to this OverridePhysics it overrides these settings. default=0 (means use table settings)    RampUp float Coil ramp up speed. Set to 0 for fastest flipper response.    Return float     Strength float     Scatter float     TimerEnabled bool     TimerInterval int set interval for triggering the timer (1 equals 1000 timer calls per second, 1000 equals 1 timer call per second, -1 makes it dependent on the FPS that a user can reach)    UserValue any can store any user defined value for re-use later-on     Gate Gate Methods    Name Description     Move(int dir, float speed, float angle) dir(0/1)    Gate Read Only    Name Type Description Default     *CloseAngle float     *Height float     *Length float     *Material string     *Name string     *OpenAngle float     *Rotation float     *Surface string     *X float     *Y float     *Visible bool      Gate Read/Write    Name Type Description Default     Collidable bool     CurrentAngle float - only readable, it returns the current open angle    Damping float - 0..1    Elasticity float     Friction float 0..1    GravityFactor float - usually between 1..3    Open bool     ShowBracket bool     TimerEnabled bool     TimerInterval int) set interval for triggering the timer (1 equals 1000 timer calls per second, 1000 equals 1 timer call per second, -1 makes it dependent on the FPS that a user can reach)    UserValue any can store any user defined value for re-use later-on     Kicker Kicker Methods    Name Description     BallCntOver(int)    CreateBall()    CreateSizedBall(float radius)    CreateSizedBallWithMass(float radius, float mass)    DestroyBall(int ballId)    Kick(float angle, float speed, float inclination)    KickXYZ(float angle, float speed, float inclination, float x, float y, float z)    KickZ(float angle, float speed, float inclination, float heightz)     Kicker Read Only    Name Type Description Default     *Name string     *Color(OLE_COLOR)      *DrawStyle KickerType 0=Hidden, 1=Hole, 2=Cup, 3=Invisible    *HitHeight float     *Legacy bool if checked the kicker will behave as an old VP9 kicker that means no distraction of the ball if it doesn\u0026rsquo;t hit straight the kicker center    *Orientation float     *Radius float     *Surface string     *X float     *Y float      Kicker Read/Write    Name Type Description Default     Enabled bool     Fall Through bool if checked the ball will fall through the surface assigned to the kicker, only if the surface is higher than the playfield    HitAccuracy float defines the accuracy how fast the ball gets caught when rolling over the kicker center (0.0-1.0)    LastCapturedBall  returns an instance to the last captured ball or the current captured ball. If no ball was captured before or was destroyed before an error message will be displayed.    Scatter float     TimerEnabled bool     TimerInterval int set interval for triggering the timer (1 equals 1000 timer calls per second, 1000 equals 1 timer call per second, -1 makes it dependent on the FPS that a user can reach)    UserValue any can store any user defined value for re-use later-on     Light Light Methods    Name Description     Duration(int startState, int durationTime, int endState) Starts a light in startState and leaves it into that state for the amount of milliseconds defined by durationTime until the light switches to the endState e.g.: light1.Duration 2, 1000, 1 (light starts to blink for 1000ms and then switches to ON)    Light Read Only    Name Type Description Default     *Image string     *Name string     *Shape Shape 0=Circle, 1=Custom    *Surface string     *X float     *Y float      Light Read/Write    Name Type Description Default     BlinkPattern string off/on pattern for the light to use while the interval is going: 1 is ON, 0 is OFF, for example 111000111000101010101    BlinkInterval int     BulbModulateVsAdd float blends between modulating and additive when bulb is enabled (0..1)    BulbHaloHeight float sets the halo height of a bulb light    Color OLE_COLOR \u0026lsquo;normal\u0026rsquo; color    ColorFull OLE_COLOR full brightness color    Bulb bool     DepthBias float     FadeSpeedUp float speed to fade into on state    FadeSpeedDown float speed to fade into off state    Falloff float     FalloffPower float     FPS that a user can reach)      ImageMode bool if true, passthrough Image (as if it would be fully emissive), otherwise light image with global lighting using the attached Surface material    Intensity float sets the lights brightness/emission    IntensityScale float sets the lights brightness/emission scale, so that one can fade in/out all affected lights with the same scaling factor    ShowBulbMesh bool     ShowReflectionOnBall bool in bulb mode, en/disable the reflection of the bulb on balls    State LightState 0=Off, 1=On, 2=Blinking    StaticBulbMesh bool     ScaleBulbMesh float     TransmissionScale float sets the light scale for transmission, f.e. through playfield plastics or transparent ramps that are placed above the bulb light    TimerEnabled bool     TimerInterval int set interval for triggering the timer (1 equals 1000 timer calls per second, 1000 equals 1 timer call per second, -1 makes it dependent on the    UserValue any can store any user defined value for re-use later-on    Visible bool      Plunger Plunger Methods    Name Description     CreateBall(IBall **ball) create a new ball located at the tip of the plunger   Fire() fire the plunger from the current position (for an auto-plunger, immediately pulls back all the way and fires with full strength)   MotionDevice() returns a non-zero integer with the type of special input device attached, or 0 if none is attached (1=Pinball Wizard, 2=Ultracade, 3=SideWinder, 4=VirtuaPin plunger kit, 5=Generic/other)   Position() returns a float (0 to 25) with the current position of the (mechanical or digital) plunger   Pullback() start retracting the plunger at the speed given by PullSpeed; continues automatically until Fire() is called    Plunger Read Only    Name Type Description Default     *AnimFrames int Flat style only: the number of animation frames in the Image; the image must be arranged with all of the frames lined up horizontally, all the same size, with the fully forward image in the leftmost cell    *AutoPlunger bool if set, this is a solenoid launcher rather than a traditional plunger    *Color OLE_COLOR surface color for 3D rendering; used only if no texture is specified via Image    *Image string image used as texture for the 3D styles or as animation cell(s) for the flat style    *MechPlunger bool true if this simulation plunger can be controlled by a mechanical plunger input device attached to the system; if set, the ParkPosition is used as the rest position    *Name string name of the object for scripting references    *PullSpeed float speed of retraction when Pullback() is called (for pulling via keyboard interface)    *RingDiam float Custom type only: the diameter of the e-ring in the on-screen rendering, as a fraction of the Width setting    *RingGap float Custom type only: the distance between the tip and the e-ring in the on-screen rendering    *RingThickness float Custom type only: the thickness of the e-ring in the on-screen rendering    *RodDiam float Custom type only: the drawing diameter of the rod as a fraction of the Width setting    *SpringDiam float Custom type only: the diameter of the spring coil in the on-screen rendering, as a fraction of the Width setting    *SpringEndLoops float Custom type only: the number of stationary (non-stretching) \u0026ldquo;end loops\u0026rdquo; the spring makes in the on-screen rendering (fractional values are allowed)    *SpringGauge float Custom type only: the thickness of the spring wire in the on-screen rendering    *SpringLoops float Custom type only: the number of loops the spring makes around the rod within the displayed extent (fractional values are allowed, as partial loops are perfectly sensible)    *Shape string Custom type only: a list of Distance/Diameter pairs separated by semicolons specifying the shape of the tip, as a series of circles centered on the plunger axis    *Surface string object for aligning vertical position of plunger; sits atop playfield if this is left blank    *Type int the visual style of the plunger drawn on-screen    *Visible bool true if plunger is visible on-screen    *Width float on-screen width of the plunger on each side of the center-line (this acts like a radius, so the actual drawing width is twice this value)    *X float x position of center-line of plunger    *Y float y position of back end of plunger    *ZAdjust float moves the on-screen rendering vertically up (positive values) or down (negative values) from the default position determined by the Surface alignment     Plunger Read/Write    Name Type Description Default     FireSpeed float speed of firing when Fire() is called or mechanical plunger is released; controls both animation speed and ball launch strength    MechStrength float controls strength of coupling to mechanical plunger position; using about the same value as FireSpeed usually works best    MomentumXfer float adjustment factor for launch strength; multiplied into final ball speed calculation on each launch, so 1.0 has no effect, and 2.0 doubles the strength    ParkPosition float distance back from fully forward position of resting position (as a fraction of the total length); used only if MechPlunger is enabled    Stroke float total travel distance; also controls the on-screen length (which is slightly longer than the travel distance, to accommodate the non-moving parts)    ScatterVelocity float amount of randomness added to ball velocity on firing    TimerEnabled bool enable the plunger\u0026rsquo;s script timer    TimerInterval int interval for firing the plunger\u0026rsquo;s script timer    UserValue any can store any user defined value for re-use later-on     Primitive Primitive Methods ** The following only applies to mesh primitives with an animation sequence\n   Name Description     PlayAnim(float startFrame, float speed) start playing the sequence from \u0026lsquo;startFrame\u0026rsquo; til the end with frame rate \u0026lsquo;speed\u0026rsquo;   PlayAnimEndless(float speed) start playing the sequence in a loop with frame rate \u0026lsquo;speed\u0026rsquo;   StopAnim() stop the animation   ContinueAnim(float speed) continue a stopped animation with frame rate \u0026lsquo;speed\u0026rsquo;   ShowFrame(float frameNr) show the mesh at frame \u0026lsquo;frameNr\u0026rsquo;, where \u0026lsquo;frameNr\u0026rsquo; can also be a fractional frame number like 1.23. VP will interpolate between subframes.    Primitive Read Only    Name Type Description Default     *EnableStaticRendering bool if set the primitive is only rendered once (like walls) any dynamic changes later won\u0026rsquo;t have an effect. This is useful for objects like posts or static toys, because this won\u0026rsquo;t have an impact of the perfomance    *IsToy bool disables collision handling and all physics preprocessing completely. It overwrites the Collidable-flag and can\u0026rsquo;t be used from within the script. This option is useful if you have real toys or static primitives which are never hitable at all and are just there for the \u0026lsquo;looks\u0026rsquo;. true   *Name string     *ReflectionEnabled bool  true   *Scatter float      Primitive Read/Write    Name Type Description Default     BackfacesEnabled bool default=false, if enabled will also show/render the backfacing triangles (if a transparent material is used)    BlendDisableLighting float 0..1, same as DisableLighting, but can blend between the two extremes    BlendDisableLightingFromBelow float 0..1, similar to DisableLighting, but will block light coming from below (e.g. from light elements)    Collidable bool enables/disables collision detection, this can be used from within the script.    DisableLighting bool     DrawTexturesInside bool textures the inside of the old standard primitive    Elasticity float     ElasticityFalloff float     Friction float  0..1   HasHitEvent bool enables the support for a hit event in the script (it\u0026rsquo;s the same as for walls)    HitThreshold float holds the current hit threshold if a ball has hit the primitive    Image string texture name    NormalMap string normal map name    RotAndTra0 or RotX float rotates the primitive around it\u0026rsquo;s X axis    RotAndTra1 or RotY float rotates the primitive around it\u0026rsquo;s Y axis    RotAndTra2 or RotZ float rotates the primitive around it\u0026rsquo;s Z axis    RotAndTra3 or TransX float translates the primitive along it\u0026rsquo;s X axis    RotAndTra4 or TransY float translates the primitive along it\u0026rsquo;s Y axis    RotAndTra5 or TransZ float translates the primitive along it\u0026rsquo;s Z axis    RotAndTra6 or ObjRotX float rotates the X axis of the primitive\u0026rsquo;s local coordinate system. This is used to orientate the object first, after that RotXYZ will rotate the object around this rotated coordinate system    RotAndTra7 or ObjRotY float rotates the Y axis of the primitive\u0026rsquo;s local coordinate system. This is used to orientate the object first, after that RotXYZ will rotate the object around this rotated coordinate system    RotAndTra8 or ObjRotZ float rotates the Z axis of the primitive\u0026rsquo;s local coordinate system. This is used to orientate the object first, after that RotXYZ will rotate the object around this rotated coordinate system    SideColor OLE_COLOR sideColor of the old standard primitive (only valid if no image was set)    Sides float amount of sides for the old standard primitive    Size_X float X size    Size_Y float Y size    Size_Z float Z size    Threshold float hit threshold for firing the hit event    TopVisible bool toggle visibility    TopColor OLE_COLOR topColor of the old standard primitive (only valid if no image was set)    UserValue any can store any user defined value for re-use later-on    X float X position    Y float Y position    Z float Z position     Ramp Ramp Methods None\nRamp Read Only    Name Type Description Default     *Name string     *ReflectionEnabled bool  true   *Scatter float     *Type RampType 0=Flat, 1=4Wire, 2=2Wire, 3=3WireLeft, 4=3WireRight, 5=Wire     Ramp Read/Write    Name Type Description Default     Collidable bool     Elasticity float     Friction float  0..1   HasHitEvent bool enables the support for a hit event in the script (it\u0026rsquo;s the same as for walls)    HasWallImage bool apply image to walls    HeightBottom float     HeightTop float     Image string texture name    ImageAlignment RampImageAlignment 0=ImageModeWorld, 1=ImageModeWrap    LeftWallHeight float     RightWallHeight float     Threshold float hit threshold for firing the hit event    UserValue any can store any user defined value for re-use later-on    Visible bool     VisibleLeftWallHeight float     VisibleRightWallHeight float     WidthBottom float     WidthTop float      Rubber Rubber Methods None\nRead Only    Name Type Description Default     *Name string     *Collidable bool     *EnableShowInEditor bool if set one cannot adjust the control points of the rubber but the rotation angles are applied to the rubber mesh in the editor.    *EnableStaticRendering bool if set the rubber is only rendered once (like walls) any dynamic changes later won\u0026rsquo;t have an effect. This is useful for static rubbers like rubbers on posts.    *HasHitEvent bool     *HitHeight float defines the collision height of a rubber (default is 25.0 midpoint of a standard ball with size 50)    *Material string     *ReflectionEnabled bool  true   *Scatter float     *Thickness int      Rubber Read/Write    Name Type Description Default     Elasticity float     ElasticityFalloff float     Friction float  0..1   Image string texture name    RotX float angle to rotate the whole rubber around the X axis    RotY float angle to rotate the whole rubber around the Y axis    RotZ float angle to rotate the whole rubber around the Z axis    TimerEnabled bool     TimerInterval int set interval for triggering the timer (1 equals 1000 timer calls per second, 1000 equals 1 timer call per second, -1 makes it dependent on the FPS that a user can reach)    UserValue any can store any user defined value for re-use later-on    Visible bool      Spinner Spinner Methods None\nSpinner Read Only    Name Type Description Default     *AngleMax float     *AngleMin float     *CurrentAngle float only readable    *Height float     *Length float     *Material string     *Name string     *ReflectionEnabled bool  true   *Rotation float     *Surface float     *ShowBracket bool     *Visible bool     *X float     *Y float      Spinner Read/Write    Name Type Description Default     Damping float  0..1   Elasticity float     Image string     TimerEnabled bool     TimerInterval int set interval for triggering the timer (1 equals 1000 timer calls per second, 1000 equals 1 timer call per second, -1 makes it dependent on the FPS that a user can reach)    UserValue any can store any user defined value for re-use later-on     Target Target Methods None\nTarget Read Only    Name Type Description Default     *Name string     *Collidable bool     *HasHitEvent bool if set a hit event is fired when the ball hits the drop/hit target without animation. An additional dropped/raised event is fired for drop targets after the mesh animation is over.    *Material string     *Orientation float angle to rotate the whole target around the Z axis    *ReflectionEnabled bool  true   *ScaleX float     *ScaleY float     *ScaleZ float     *Scatter float     *X float     *Y float     *Z float      Target Read/Write    Name Type Description Default     BlendDisableLighting float same as DisableLighting, but can blend between the two extremes 0..1   BlendDisableLightingFromBelow float similar to DisableLighting, but will block light coming from below (e.g. from light elements) 0..1   DisableLighting bool     DropSpeed float the speed how fast the drop or hit target will move    Elasticity float     ElasticityFalloff float     Friction float  0..1   Image string texture name    IsDropped bool can only be used for drop targets if the drop target is raised or dropped    HitThreshold float holds the current hit threshold if a ball has hit the target    RaiseDelay int defines a delay in milliseconds after the dropped target will start to raise to it\u0026rsquo;s normal position    TimerEnabled bool each target has a build-in timer which can be enabled by setting this to 1    TimerInterval int set interval for triggering the timer (1 equals 1000 timer calls per second, 1000 equals 1 timer call per second, -1 makes it dependent on the FPS that a user can reach)    UserValue any can store any user defined value for re-use later-on    Threshold float hit threshold for firing the hit event    Visible bool      Textbox Textbox Methods None\nTextbox Read/Write    Name Type Description Default     Alignment      Height float     IsTransparent bool/int     BackColor OLE_COLOR     DMD bool enable DMD image via script connection    Font      FontColor OLE_COLOR     IntensityScale float scales the color of the textbox    Name string     Text string     TimerEnabled bool/int     TimerInterval int set interval for triggering the timer (1 equals 1000 timer calls per second, 1000 equals 1 timer call per second, -1 makes it dependent on the FPS that a user can reach)    UserValue any can store any user defined value for re-use later-on    Visible bool     Width float     X float     Y float      Timer Timer Methods None\nTimer Read Only    Name Type Description Default     *Name string      Timer Read/Write    Name Type Description Default     Enabled bool     Interval int set interval for triggering the timer (1 equals 1000 timer calls per second, 1000 equals 1 timer call per second, -1 makes it dependent on the FPS that a user can reach)    UserValue any can store any user defined value for re-use later-on     Trigger Trigger Methods    Name Description     BallCntOver(int value)    DestroyBall(int ballId)     Trigger Read Only    Name Type Description Default     *Enabled bool     *Name string     *Radius float     *TriggerShape(Shape) - 0=None, 1=Wire, 2=Star      *Visible bool     *X float     *Y float      Trigger Read/Write    Name Type Description Default     AnimSpeed float     HitHeight float     Rotation float     Surface string     TimerEnabled bool     TimerInterval int set interval for triggering the timer (1 equals 1000 timer calls per second, 1000 equals 1 timer call per second, -1 makes it dependent on the FPS that a user can reach)    UserValue any can store any user defined value for re-use later-on    WireThickness float This option is only used for wire shape triggers. The thickness is a factor to scale the wire 0=normal thickness(default). To make it thicker use values like 0.5, 1, 1.5, 2\u0026hellip;     Wall Wall Methods    Name Description     PlaySlingshotHit() if the wall has slingshots defined, a call to this function will play the hit animation without triggering the actual hit event.    Wall Read Only    Name Type Description Default     *Name string     *HasHitEvent bool     *Image string texture name    *SideColor OLE_COLOR     *HeightBottom float     *HeightTop float     *FaceColor OLE_COLOR     *CanDrop bool     *DisplayTexture bool     *SideImage string     *Visible bool     *SideVisible bool     *SlingshotColor OLE_COLOR     *SlingshotAnimation bool     *FlipbookAnimation bool     *Scatter float     *ReflectionEnabled bool  true    Wall Read/Write    Name Type Description Default     Collideable bool     BlendDisableLighting float 0..1, same as DisableLighting, but can blend between the two extremes    BlendDisableLightingFromBelow float 0..1, similar to DisableLighting, but will block light coming from below (e.g. from light elements)    Disabled bool     DisableLighting bool     Elasticity float     Friction float 0..1    IsBottomSolid bool     IsDropped bool     SlingshotThreshold float     Threshold float     TimerEnabled bool     TimerInterval int set interval for triggering the timer (1 equals 1000 timer calls per second, 1000 equals 1 timer call per second, -1 makes it dependent on the FPS that a user can reach)    UserValue any can store any user defined value for re-use later-on     ","description":"Visual Pinball Api references for scripting in visual basic script.","id":23,"section":"simulation","tags":["audio","backglass","ball","decal","flasher","flipper","gate","Kicker","light","physics","plunger","primitive","ramp- reel","rubber","scripting","spinner","switch","table","target","textbox","timer","trigger","wall"],"title":"üìù Visual Pinball Api","uri":"https://blog.flippingflips.com/en/simulation/visualpinball/vp-api-ref/"},{"content":"As a template already has an updated Primitive for walls, we\u0026rsquo;ll use the blank template as a starter table Link\n\r\rGuide Outline 1. Find the primitive\n2. Editing texture\nPrimitive Find the WallsTranslite primitive (multiple options):\n Use the Select option next to Maginify (Quickest with less objects in table) Or Use Ctrl+Shift+E to open Select Element and find in list to select Or Just show Layer 11 and select it from playfield.  Copying the primitive Not needed for this guide but if you want to use this in another table.\n Ctrl+C to copy with it selected Ctrl+V to paste in an existing open table. Adjust dimensions on the primitive on the X,Y to fit your table if is a different size.  Texture In the Image Manager (F3) there is a WallsTranslite image assigned to the primitive.\nThe texture is 2048 x 2048 and displays Left, Right, Back, Translite and this can be exported from the Image Manager.\nGimp edit tips  Use fuzzy select with 150 threshold to select the panels Fill the selections a color Edit \u0026gt; Fill with color  \r\r Edit the image as you see fit  \r\rImport texture  Use the Reimport From in the Image Manager (F3) to load in edited WallsTranslite image. Next time you make edits to the image you can use the Reimport button to save time.  Run the game with F5 to view the result or run F6 when loaded use Flippers to adjust view.\n","description":"How to add some inner walls and translite for visual pinball","id":24,"section":"simulation","tags":["beginner","cosmetic","design","graphics","primitive","translite","wall"],"title":"üèóÔ∏è Primitive - Inner cabinet Walls and Translite","uri":"https://blog.flippingflips.com/en/simulation/visualpinball/guides/design/primitive-walls-translite/"},{"content":"About A collection of materials based on the default PhysicValues.txt that comes with the Visual Pinball build.\nObjects can assign a Physics Material to ovverride the physics values on the object helping you keep table physics managed and editable from material editor.\n\r\rMaterials Included\r\r a_physics_MetalGuide.mat a_physics_MetalWall.mat a_physics_Plastic.mat a_physics_Rubber.mat a_physics_RubberPost.mat a_physics_TargetMetal.mat a_physics_TargetPlastic.mat a_physics_Wood.mat  \r \r\rDownload Download mats-physics.7z\n","description":"Visual Pinball Physics Materials","id":25,"section":"simulation","tags":["materials","physics"],"title":"üé® Materials - Physics","uri":"https://blog.flippingflips.com/en/simulation/visualpinball/template/materials/mats-physics/"},{"content":"About This table template was created from a BlankTable in VPX 10.6.0 and was meant to be as lightweight as possible. For testing, copy pasting into other tables.\n\r\rFeatures \\ Guide \r\rDimensions\r\r Default no change    Width Height     952 2162   20.250\u0026rdquo; 46.0\u0026rdquo;      \r \r\rObjects\r\r Removed all template primitives apart from posts Removed RubberEMWheel Removed Flipper Shadows Added Trough exit screwed panel Added larger / modern WallsTranslite primitive and template texture WallsTranslite.png. (Removed sidewalls)  \r \r\rPhysics\r\r Lowered Flipper strength   Metal, Wood, Rubber collidables use a_physics materials based on physics values given.   Change Plunger pull speed lower to 80  \r \r\rLayers\r\r 1 = Flippers, other 2 = Switches, bumpers etc 3 = Lights, GI 5 = Plastics 10 = All collidable objects 11 = Cabinet, walls  \r \r\rNotes\r\r Removed all default sound and images to reduce file size to 3mb, zips to 500kb Rubber posts are two layers. Hidden collidable 0-55 height with visible rubbers. Metal guides are two layers. Hidden collidable straight edges with visible curved walls.  \r Download Download - fflips_new-blank-stripped.7z\n","description":"Visual Pinball Table template with a reduced file size created from blank table","id":26,"section":"simulation","tags":["beginner"],"title":"üèì Table - Blank Stripped","uri":"https://blog.flippingflips.com/en/simulation/visualpinball/template/table/table-blank-stripped/"},{"content":"Links ","description":"Flipping flips","id":27,"section":"","tags":null,"title":"Links","uri":"https://blog.flippingflips.com/en/about/"}]